{"name":"Blam.js","body":"blam.js\r\n=======\r\n\r\n**Simple, Tiny, Fast** (enough)\r\n\r\nExample usage (in CoffeeScript):\r\n\r\n```coffeescript\r\nblam(->\r\n  html(\r\n    head(\r\n      title(\"Hello\")\r\n      script( src:\"/my-script.js\" )\r\n      link(\r\n        rel:\"stylesheet\"\r\n        type:\"text/css\"\r\n        href:\"/my-styles.css\"\r\n      )\r\n    )\r\n    body(\r\n      article( id:\"main\",\r\n        section( class:'content',\r\n          p(\"Loading...\")\r\n        )\r\n        aside( class:'sidebar' )\r\n      )\r\n    )\r\n  )\r\n)\r\n```\r\n\r\nIn JavaScript:\r\n\r\n```javascript\r\nblam(function(){\r\n  html(\r\n    head(\r\n      title(\"Hello\"), \r\n      script({ src: \"/my-script.js\" }),\r\n      link({ rel: \"stylesheet\", type: \"text/css\", href: \"/my-styles.css\" })), \r\n      body(\r\n        article({ id: \"main\" }, \r\n          section({ \"class\": 'content' }, \r\n            p(\"Loading...\")\r\n          ), \r\n        aside({ \"class\": 'sidebar'})\r\n      )\r\n    )\r\n  )\r\n});\r\n```\r\n\r\n## Notes\r\n\r\nClocks in at ~1K minified and gzipped.\r\n\r\nSupports adding custom tags:\r\n\r\n```coffeescript\r\nblam.define 'jqmpage', (args...)->\r\n  div 'data-role':'page',\r\n    div 'data-role':'header', args...\r\n```\r\n\r\nPasses initial arguments on to markup block:\r\n\r\n```coffeescript\r\nblam name:'Matt', (user)->\r\n  div( id:'user-block',\r\n    p(\"Hello \", user.name)\r\n  )\r\n```\r\n\r\nCan be \"compiled\" into an executable function (good for often repeated bits of code):\r\n\r\n```coffeescript\r\ntemplate= blam.compile (user)->\r\n  div( id:'user-block',\r\n    p(\"Hello \", user.name)\r\n  )\r\n\r\nhtml+= template(user) for user in all_users\r\n```\r\n\r\n## BackBone Example\r\n\r\n```coffeescript\r\nclass TweetListView extends Backbone.View\r\n  initialize: ->\r\n    # bind to @collection changes to add/remove TweetViews\r\n    \r\n  render: ->\r\n    @el.append blam(@, (view)->\r\n      div( class:\"tweet-list\", -> \r\n        # probably wouldn't actually need a root node, good for example though\r\n        view.collection.each (tweet)-> \r\n          tweetView= new TweetView( model:tweet )\r\n          tweetView.render().el\r\n      )\r\n    )\r\n\r\nclass TweetView extends Backbone.View\r\n  className: 'tweet'\r\n  \r\n  events:\r\n    \"click .reply\": \"doReply\"\r\n  \r\n  doReply: (e)=>\r\n    alert \"Do reply code here...\"\r\n    \r\n  render: ->\r\n    @el.attr 'id', @model.get(id)\r\n    @el.append blam(@model, (model)->\r\n      div( class:\"body\",\r\n        div( class:\"actions\",\r\n          button( class:\"reply\", \"Reply...\" )\r\n          button( class:\"retweet\", \"Retweet...\" )\r\n        )\r\n        model.get('body')\r\n      )\r\n    )\r\n```\r\n\r\n## Aren't `eval` and `with` Evil?\r\n\r\nNo! They're just misunderstood. This is exactly why they are useful as a language feature. They allow excellent DSL generation.\r\n\r\nThat said, it *is* a good rule of thumb that if you don't know when is best to use them; don't.\r\n","tagline":"Templates are just code.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}